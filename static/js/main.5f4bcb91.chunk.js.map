{"version":3,"sources":["logo.svg","store/action.js","store/reducers.js","components/MatrixItem/MatrixItem.jsx","components/RowSum/RowSum.jsx","components/ColumnAverage/ColumnAverage.jsx","components/Matrix/Matrix.jsx","components/Input/Input.jsx","components/Form/Form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","ACTION_TYPES","setColumnsNumber","param","payload","type","setMatrix","isInputInteger","value","Math","abs","floor","Number","store","createStore","state","action","SET_COLUMNS_NUMBER","SET_ROWS_NUMBER","SET_HIGLIGHT_CELLS_NNUMBER","SET_MATRIX","matrix","columnsNumber","rowsNumber","highlightCellsNumber","devToolsEnhancer","connect","ownProps","Amount","matrixItem","ID","isHiglight","percentage","useState","isPercentageShow","setPercentageShow","percentageToSrt","percent","toFixed","percentageStyle","backgroundImage","className","style","onClick","id","dispatch","map","item","onMouseEnter","hashAmountDelta","amountDelta","sort","a","b","slice","some","hashItem","onMouseLeave","RowSum","amount","defaultProps","ColumnAverage","randomGenerator","i","random","useEffect","tmp","Array","fill","gridShape","gridTemplateColumns","gridTemplateRows","rowSums","rowIndex","reduce","acc","mat","columnAverage","length","columnIndex","index","key","shortid","generate","Input","inputLabel","inputHandler","val","inputId","split","join","toLowerCase","htmlFor","onChange","e","target","inputsArray","text","inputField","label","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f4bcb91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ACTION_TYPES = {\n  SET_COLUMNS_NUMBER: 'SET::COLUMNS::NUMBER',\n  SET_HIGLIGHT_CELLS_NNUMBER: 'SET::HIGLIGHT::CELLS::NNUMBER',\n  SET_MATRIX: 'SET::MATRIX',\n  SET_ROWS_NUMBER: 'SET::ROWS::NUMBER',\n};\n\nexport const setColumnsNumber = (param) => ({\n  payload: param,\n  type: ACTION_TYPES.SET_COLUMNS_NUMBER,\n});\n\nexport const setRowsNumber = (param) => ({\n  payload: param,\n  type: ACTION_TYPES.SET_ROWS_NUMBER,\n});\n\nexport const setHiglightCellsNumber = (param) => ({\n  payload: param,\n  type: ACTION_TYPES.SET_HIGLIGHT_CELLS_NNUMBER,\n});\n\nexport const setMatrix = (param) => ({\n  payload: param,\n  type: ACTION_TYPES.SET_MATRIX,\n});\n","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nimport {\n  ACTION_TYPES,\n  setColumnsNumber,\n} from './action';\n\nconst isInputInteger = (value) => Math.abs(Math.floor(Number(value)));\n\nfunction reducer(state, action) {\n  const {\n    SET_COLUMNS_NUMBER,\n    SET_ROWS_NUMBER,\n    SET_HIGLIGHT_CELLS_NNUMBER,\n    SET_MATRIX,\n  } = ACTION_TYPES;\n\n  switch (action.type) {\n    case SET_MATRIX: {\n      return {\n        ...state,\n        matrix: action.payload,\n      };\n    }\n\n    case SET_COLUMNS_NUMBER: {\n      return {\n        ...state,\n        columnsNumber: isInputInteger(action.payload),\n      };\n    }\n\n    case SET_ROWS_NUMBER: {\n      return {\n        ...state,\n        rowsNumber: isInputInteger(action.payload),\n      };\n    }\n\n    case SET_HIGLIGHT_CELLS_NNUMBER: {\n      return {\n        ...state,\n        highlightCellsNumber: isInputInteger(action.payload) > state.columnsNumber * state.rowsNumber\n          ? state.columnsNumber * state.rowsNumber\n          : isInputInteger(action.payload),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(\n  reducer,\n  {\n    columnsNumber: 0,\n    highlightCellsNumber: 0,\n    matrix: [],\n    rowsNumber: 0,\n  },\n  devToolsEnhancer(\n    setColumnsNumber(),\n  ),\n);\n\nexport default store;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport store from '../../store/reducers';\nimport { setMatrix } from '../../store/action';\n\nimport './MatrixItem.scss';\n\nconst MatrixItem = ({\n  matrix,\n  Amount,\n  highlightCellsNumber,\n  ID,\n  isHiglight,\n  percentage,\n}) => {\n  const [isPercentageShow, setPercentageShow] = useState(false);\n\n  const percentageToSrt = (percent) => `${Number(percent * 100).toFixed(1)}%`;\n\n  const percentageStyle = {\n    backgroundImage: `linear-gradient(to right, orange 0% ${percentageToSrt(percentage)}, lemonchiffon ${percentageToSrt(percentage)} 100%)`,\n  };\n\n  const onClickMatrixItem = (id) => {\n    const incrementItemAmount = (item) => (\n      item.ID === id\n        ? { ...item, Amount: item.Amount + 1 }\n        : item\n    );\n\n    store.dispatch(setMatrix(matrix.map(incrementItemAmount)));\n  };\n\n  const onMouseEnterHandler = () => {\n    setPercentageShow(true);\n\n    const hashAmountDelta = matrix\n      .map((item) => ({\n        ...item,\n        amountDelta: Math.abs(item.Amount - Amount),\n      }))\n      .sort((a, b) => {\n        if (a.amountDelta < b.amountDelta) {\n          return -1;\n        }\n        if (a.amountDelta > b.amountDelta) {\n          return 1;\n        }\n        return 0;\n      })\n      .slice(1, highlightCellsNumber);\n\n    store.dispatch(setMatrix(matrix\n      .map((item) => (\n        hashAmountDelta.some((hashItem) => (hashItem.ID === item.ID))\n          ? { ...item, isHiglight: true }\n          : { ...item, isHiglight: false }\n      ))));\n  };\n\n  const onMouseLeaveHandler = () => {\n    setPercentageShow(false);\n\n    store.dispatch(setMatrix(matrix.map((item) => ({\n      ...item,\n      isHiglight: false,\n    }))));\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={`matrix__item ${isHiglight ? 'matrix__item_higlight' : ''}`}\n      style={isPercentageShow ? percentageStyle : {}}\n      onClick={() => onClickMatrixItem(ID)}\n      onMouseEnter={onMouseEnterHandler}\n      onMouseLeave={onMouseLeaveHandler}\n    >\n      {isPercentageShow\n        ? (\n          <span className=\"matrix__button-text\">\n            {percentageToSrt(percentage)}\n          </span>\n        )\n        : (\n          <span className=\"matrix__button-text\">\n            {Amount}\n          </span>\n        )}\n    </button>\n  );\n};\n\nMatrixItem.propTypes = {\n  Amount: PropTypes.number.isRequired,\n  ID: PropTypes.number.isRequired,\n  highlightCellsNumber: PropTypes.number.isRequired,\n  isHiglight: PropTypes.bool.isRequired,\n  matrix: PropTypes.arrayOf(PropTypes.object).isRequired,\n  percentage: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  Amount: ownProps.matrixItem.Amount,\n  ID: ownProps.matrixItem.ID,\n  highlightCellsNumber: state.highlightCellsNumber + 1,\n  isHiglight: ownProps.matrixItem.isHiglight,\n  matrix: state.matrix,\n  percentage: ownProps.percentage,\n});\n\nexport default connect(mapStateToProps)(MatrixItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './RowSum.scss';\n\nconst RowSum = ({ amount }) => (\n  <div className=\"matrix__row-sum\">{amount}</div>\n);\n\nRowSum.propTypes = {\n  amount: PropTypes.number,\n};\n\nRowSum.defaultProps = {\n  amount: 0,\n};\n\nexport default RowSum;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ColumnAverage.scss';\n\nconst ColumnAverage = ({ amount }) => (\n  <div className=\"matrix__column-average\">{amount}</div>\n);\n\n\nColumnAverage.propTypes = {\n  amount: PropTypes.number.isRequired,\n};\n\nexport default ColumnAverage;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport store from '../../store/reducers';\nimport { setMatrix } from '../../store/action';\nimport MatrixItem from '../MatrixItem/MatrixItem';\nimport RowSum from '../RowSum/RowSum';\nimport ColumnAverage from '../ColumnAverage/ColumnAverage';\n\nimport './Matrix.scss';\n\nconst randomGenerator = (item, i) => ({\n  Amount: Math.floor(Math.random() * 1000),\n  ID: i,\n  isHiglight: false,\n});\n\nconst Matrix = ({\n  columnsNumber,\n  matrix,\n  rowsNumber,\n}) => {\n  useEffect(() => {\n    const tmp = Array(columnsNumber * rowsNumber).fill(0).map(randomGenerator);\n    store.dispatch(setMatrix(tmp));\n  }, [columnsNumber, rowsNumber]);\n\n  const gridShape = {\n    gridTemplateColumns: `repeat(${columnsNumber + 1}, 1fr)`,\n    gridTemplateRows: `repeat(${rowsNumber + 1}, 1fr)`,\n  };\n\n  const rowSums = Array(rowsNumber).fill(0).map((item, rowIndex) => matrix.reduce((acc, mat, i) => {\n    if ((i >= rowIndex * columnsNumber) && (i < (rowIndex + 1) * columnsNumber)) {\n      return acc + mat.Amount;\n    }\n    return acc;\n  }, 0));\n\n  let columnAverage = [];\n  if (rowSums.length) {\n    columnAverage = Array(columnsNumber).fill(0).map((item, columnIndex) => {\n      let acc = 0;\n      for (let i = columnIndex; i <= columnsNumber * rowsNumber - 1; i += columnsNumber) {\n        acc += typeof matrix[i] === 'undefined' ? 0 : matrix[i].Amount;\n      }\n      return Math.floor(acc / rowsNumber);\n    });\n  }\n\n  return (\n    <div className=\"matrix\" style={gridShape}>\n      {matrix.map((item, index) => (\n        ((index % columnsNumber) === (columnsNumber - 1))\n          ? (\n            <>\n              <MatrixItem\n                key={item.ID}\n                matrixItem={item}\n                percentage={item.Amount / rowSums[Math.floor(index / columnsNumber)]}\n              />\n              <RowSum\n                key={shortid.generate()}\n                amount={rowSums[Math.floor(index / columnsNumber)]}\n              />\n            </>\n          )\n          : (\n            <MatrixItem\n              key={item.ID}\n              matrixItem={item}\n              percentage={item.Amount / rowSums[Math.floor(index / columnsNumber)]}\n            />\n          )\n      ))}\n      {columnAverage.map((item) => (\n        <ColumnAverage\n          key={shortid.generate()}\n          amount={item}\n        />\n      ))}\n    </div>\n  );\n};\n\nMatrix.propTypes = {\n  columnsNumber: PropTypes.number.isRequired,\n  matrix: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rowsNumber: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  columnsNumber: state.columnsNumber,\n  matrix: state.matrix,\n  rowsNumber: state.rowsNumber,\n});\n\nexport default connect(mapStateToProps)(Matrix);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport store from '../../store/reducers';\n\nimport './Input.scss';\n\nconst Input = ({ inputLabel, inputHandler, val }) => {\n  const setValueHandler = (param) => store.dispatch(inputHandler(param));\n\n  const inputId = inputLabel.split(' ').join('-').toLowerCase();\n\n  return (\n    <label\n      htmlFor={inputId}\n      className=\"main-form__label\"\n    >\n      {inputLabel}\n      <input\n        id={inputId}\n        className=\"main-form__input\"\n        type=\"number\"\n        onChange={(e) => setValueHandler(e.target.value)}\n        value={val}\n      />\n    </label>\n  );\n};\n\nInput.propTypes = {\n  inputHandler: PropTypes.func.isRequired,\n  inputLabel: PropTypes.string.isRequired,\n  val: PropTypes.number.isRequired,\n};\n\nexport default Input;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Input from '../Input/Input';\nimport { setColumnsNumber, setRowsNumber, setHiglightCellsNumber } from '../../store/action';\n\nimport './Form.scss';\n\nconst inputsArray = [\n  {\n    action: setRowsNumber,\n    text: 'Row Number',\n  },\n  {\n    action: setColumnsNumber,\n    text: 'Column Number',\n  },\n  {\n    action: setHiglightCellsNumber,\n    text: 'Higlight Cell Number',\n  },\n];\n\nconst mapStateToProps = (state) => ({\n  columnsNumber: state.columnsNumber,\n  highlightCellsNumber: state.highlightCellsNumber,\n  rowsNumber: state.rowsNumber,\n});\n\nconst inputField = (label) => (\n  <Input\n    key={label.text.split(' ').join('')}\n    inputLabel={label.text}\n    inputHandler={label.action}\n    val={label.value}\n  />\n);\n\nconst Form = ({ columnsNumber, highlightCellsNumber, rowsNumber }) => {\n  inputsArray[0].value = rowsNumber;\n  inputsArray[1].value = columnsNumber;\n  inputsArray[2].value = highlightCellsNumber;\n\n  return (\n    <form className=\"main-form\">\n      {inputsArray.map(inputField)}\n    </form>\n  );\n};\n\nForm.propTypes = {\n  columnsNumber: PropTypes.number.isRequired,\n  highlightCellsNumber: PropTypes.number.isRequired,\n  rowsNumber: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Form);\n","import React from 'react';\nimport Matrix from './components/Matrix/Matrix';\nimport Form from './components/Form/Form';\nimport logo from './logo.svg';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Form />\n      </header>\n      <Matrix />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/reducers';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}